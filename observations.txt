//observations

We did not have time to implement the MyOpenChainDict function. While our MyOpenLinearDict and MyOpenQuadraticDict functions aren't 100% working, we can make
some general observations about the theoretical efficiency of the functions. The professor's implementation was the most efficient implementation, as it would parse
through the 5,000,000 lines of reviews within 5 minutes. However, theoretically we could say that the MyOpenLinearDict/MyOpenQuadraticDict would run in the same 
time as the professor since there are less values that require less rehashing. As the size of the hash table increases, rehashing becomes an increasingly more 
expensive procedure, so this is why we assume that if our functions were to deal with the larger test cases, it would take much longer than the professors
implementation.

The linear probing function would be the least efficient out of the three, since the most amount of collisions, and rehashes would occur, since it only rehashes
by adding + i to the akey. The quadratic probing function would be more efficient than the linear probing function, since it addresss the primary clustering that
occurs by moving it i^2 spots away from the original length of the hash table rather than the i spot that it moves during the linear probing.

We weren't able to get an implementation of the separate chaining model down, so we will make some more theoretical observations. It deals with collisions by adding
list of tuples at every slot in the hash table, and uses the rehashing tool in order to ensure that everytime more than one list is added to a slot, the amount of 
tuples at each index isn't inordinately larger than the other. It would also increase the size of the table if it becomes impossible to accommodate the amount of 
tuples at each index efficiently. This would theoretically be the most efficient implementation based on the observations made in Written Homework #4. 